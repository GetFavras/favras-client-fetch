/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { RequisiteCompleteParams } from './RequisiteCompleteParams';
import {
    instanceOfRequisiteCompleteParams,
    RequisiteCompleteParamsFromJSON,
    RequisiteCompleteParamsFromJSONTyped,
    RequisiteCompleteParamsToJSON,
} from './RequisiteCompleteParams';
import type { RequisiteQueryParams } from './RequisiteQueryParams';
import {
    instanceOfRequisiteQueryParams,
    RequisiteQueryParamsFromJSON,
    RequisiteQueryParamsFromJSONTyped,
    RequisiteQueryParamsToJSON,
} from './RequisiteQueryParams';

/**
 * @type Strategy
 * 
 * @export
 */
export type Strategy = { type: 'complete' } & RequisiteCompleteParams | { type: 'query' } & RequisiteQueryParams;

export function StrategyFromJSON(json: any): Strategy {
    return StrategyFromJSONTyped(json, false);
}

export function StrategyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Strategy {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'complete':
            return Object.assign({}, RequisiteCompleteParamsFromJSONTyped(json, true), { type: 'complete' } as const);
        case 'query':
            return Object.assign({}, RequisiteQueryParamsFromJSONTyped(json, true), { type: 'query' } as const);
        default:
            return json;
    }
}

export function StrategyToJSON(json: any): any {
    return StrategyToJSONTyped(json, false);
}

export function StrategyToJSONTyped(value?: Strategy | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'complete':
            return Object.assign({}, RequisiteCompleteParamsToJSON(value), { type: 'complete' } as const);
        case 'query':
            return Object.assign({}, RequisiteQueryParamsToJSON(value), { type: 'query' } as const);
        default:
            return value;
    }
}

