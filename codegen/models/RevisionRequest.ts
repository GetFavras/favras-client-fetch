/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Compression } from './Compression';
import {
    CompressionFromJSON,
    CompressionFromJSONTyped,
    CompressionToJSON,
    CompressionToJSONTyped,
} from './Compression';
import type { Multimodal } from './Multimodal';
import {
    MultimodalFromJSON,
    MultimodalFromJSONTyped,
    MultimodalToJSON,
    MultimodalToJSONTyped,
} from './Multimodal';
import type { Promptroles } from './Promptroles';
import {
    PromptrolesFromJSON,
    PromptrolesFromJSONTyped,
    PromptrolesToJSON,
    PromptrolesToJSONTyped,
} from './Promptroles';
import type { RevisionTagSpecifier } from './RevisionTagSpecifier';
import {
    RevisionTagSpecifierFromJSON,
    RevisionTagSpecifierFromJSONTyped,
    RevisionTagSpecifierToJSON,
    RevisionTagSpecifierToJSONTyped,
} from './RevisionTagSpecifier';
import type { Requisites } from './Requisites';
import {
    RequisitesFromJSON,
    RequisitesFromJSONTyped,
    RequisitesToJSON,
    RequisitesToJSONTyped,
} from './Requisites';

/**
 * Request to create document revision tasks.
 * @export
 * @interface RevisionRequest
 */
export interface RevisionRequest {
    [key: string]: any | any;
    /**
     * 
     * @type {Requisites}
     * @memberof RevisionRequest
     */
    requisites: Requisites;
    /**
     * 
     * @type {string}
     * @memberof RevisionRequest
     */
    comparisons?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RevisionRequest
     */
    projections?: string | null;
    /**
     * 
     * @type {Promptroles}
     * @memberof RevisionRequest
     */
    promptroles?: Promptroles | null;
    /**
     * 
     * @type {RevisionTagSpecifier}
     * @memberof RevisionRequest
     */
    tags?: RevisionTagSpecifier | null;
    /**
     * 
     * @type {Multimodal}
     * @memberof RevisionRequest
     */
    multimodal?: Multimodal | null;
    /**
     * 
     * @type {Compression}
     * @memberof RevisionRequest
     */
    compression?: Compression | null;
}

/**
 * Check if a given object implements the RevisionRequest interface.
 */
export function instanceOfRevisionRequest(value: object): value is RevisionRequest {
    if (!('requisites' in value) || value['requisites'] === undefined) return false;
    return true;
}

export function RevisionRequestFromJSON(json: any): RevisionRequest {
    return RevisionRequestFromJSONTyped(json, false);
}

export function RevisionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevisionRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'requisites': RequisitesFromJSON(json['requisites']),
        'comparisons': json['comparisons'] == null ? undefined : json['comparisons'],
        'projections': json['projections'] == null ? undefined : json['projections'],
        'promptroles': json['promptroles'] == null ? undefined : PromptrolesFromJSON(json['promptroles']),
        'tags': json['tags'] == null ? undefined : RevisionTagSpecifierFromJSON(json['tags']),
        'multimodal': json['multimodal'] == null ? undefined : MultimodalFromJSON(json['multimodal']),
        'compression': json['compression'] == null ? undefined : CompressionFromJSON(json['compression']),
    };
}

export function RevisionRequestToJSON(json: any): RevisionRequest {
    return RevisionRequestToJSONTyped(json, false);
}

export function RevisionRequestToJSONTyped(value?: RevisionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'requisites': RequisitesToJSON(value['requisites']),
        'comparisons': value['comparisons'],
        'projections': value['projections'],
        'promptroles': PromptrolesToJSON(value['promptroles']),
        'tags': RevisionTagSpecifierToJSON(value['tags']),
        'multimodal': MultimodalToJSON(value['multimodal']),
        'compression': CompressionToJSON(value['compression']),
    };
}

