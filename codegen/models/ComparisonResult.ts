/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComparisonError } from './ComparisonError';
import {
    ComparisonErrorFromJSON,
    ComparisonErrorFromJSONTyped,
    ComparisonErrorToJSON,
    ComparisonErrorToJSONTyped,
} from './ComparisonError';
import type { ComparisonValue } from './ComparisonValue';
import {
    ComparisonValueFromJSON,
    ComparisonValueFromJSONTyped,
    ComparisonValueToJSON,
    ComparisonValueToJSONTyped,
} from './ComparisonValue';

/**
 * 
 * @export
 * @interface ComparisonResult
 */
export interface ComparisonResult {
    /**
     * 
     * @type {boolean}
     * @memberof ComparisonResult
     */
    equal: boolean;
    /**
     * 
     * @type {Array<ComparisonValue>}
     * @memberof ComparisonResult
     */
    values: Array<ComparisonValue>;
    /**
     * 
     * @type {ComparisonError}
     * @memberof ComparisonResult
     */
    error?: ComparisonError | null;
}

/**
 * Check if a given object implements the ComparisonResult interface.
 */
export function instanceOfComparisonResult(value: object): value is ComparisonResult {
    if (!('equal' in value) || value['equal'] === undefined) return false;
    if (!('values' in value) || value['values'] === undefined) return false;
    return true;
}

export function ComparisonResultFromJSON(json: any): ComparisonResult {
    return ComparisonResultFromJSONTyped(json, false);
}

export function ComparisonResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComparisonResult {
    if (json == null) {
        return json;
    }
    return {
        
        'equal': json['equal'],
        'values': ((json['values'] as Array<any>).map(ComparisonValueFromJSON)),
        'error': json['error'] == null ? undefined : ComparisonErrorFromJSON(json['error']),
    };
}

export function ComparisonResultToJSON(json: any): ComparisonResult {
    return ComparisonResultToJSONTyped(json, false);
}

export function ComparisonResultToJSONTyped(value?: ComparisonResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'equal': value['equal'],
        'values': ((value['values'] as Array<any>).map(ComparisonValueToJSON)),
        'error': ComparisonErrorToJSON(value['error']),
    };
}

