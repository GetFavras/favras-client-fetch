/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FragmentSizes } from './FragmentSizes';
import {
    FragmentSizesFromJSON,
    FragmentSizesFromJSONTyped,
    FragmentSizesToJSON,
    FragmentSizesToJSONTyped,
} from './FragmentSizes';

/**
 * 
 * @export
 * @interface RequisiteQueryParams
 */
export interface RequisiteQueryParams {
    /**
     * 
     * @type {string}
     * @memberof RequisiteQueryParams
     */
    type?: RequisiteQueryParamsTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RequisiteQueryParams
     */
    embeddingModel: string;
    /**
     * 
     * @type {string}
     * @memberof RequisiteQueryParams
     */
    query: string;
    /**
     * 
     * @type {number}
     * @memberof RequisiteQueryParams
     */
    topK: number;
    /**
     * 
     * @type {boolean}
     * @memberof RequisiteQueryParams
     */
    mergeable: boolean;
    /**
     * 
     * @type {FragmentSizes}
     * @memberof RequisiteQueryParams
     */
    fragmentSize: FragmentSizes;
}


/**
 * @export
 */
export const RequisiteQueryParamsTypeEnum = {
    Query: 'query'
} as const;
export type RequisiteQueryParamsTypeEnum = typeof RequisiteQueryParamsTypeEnum[keyof typeof RequisiteQueryParamsTypeEnum];


/**
 * Check if a given object implements the RequisiteQueryParams interface.
 */
export function instanceOfRequisiteQueryParams(value: object): value is RequisiteQueryParams {
    if (!('embeddingModel' in value) || value['embeddingModel'] === undefined) return false;
    if (!('query' in value) || value['query'] === undefined) return false;
    if (!('topK' in value) || value['topK'] === undefined) return false;
    if (!('mergeable' in value) || value['mergeable'] === undefined) return false;
    if (!('fragmentSize' in value) || value['fragmentSize'] === undefined) return false;
    return true;
}

export function RequisiteQueryParamsFromJSON(json: any): RequisiteQueryParams {
    return RequisiteQueryParamsFromJSONTyped(json, false);
}

export function RequisiteQueryParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequisiteQueryParams {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'embeddingModel': json['embedding_model'],
        'query': json['query'],
        'topK': json['top_k'],
        'mergeable': json['mergeable'],
        'fragmentSize': FragmentSizesFromJSON(json['fragment_size']),
    };
}

export function RequisiteQueryParamsToJSON(json: any): RequisiteQueryParams {
    return RequisiteQueryParamsToJSONTyped(json, false);
}

export function RequisiteQueryParamsToJSONTyped(value?: RequisiteQueryParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'embedding_model': value['embeddingModel'],
        'query': value['query'],
        'top_k': value['topK'],
        'mergeable': value['mergeable'],
        'fragment_size': FragmentSizesToJSON(value['fragmentSize']),
    };
}

