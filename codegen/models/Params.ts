/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ComparisonLazyParams } from './ComparisonLazyParams';
import {
    instanceOfComparisonLazyParams,
    ComparisonLazyParamsFromJSON,
    ComparisonLazyParamsFromJSONTyped,
    ComparisonLazyParamsToJSON,
} from './ComparisonLazyParams';
import type { ComparisonLevenshteinParams } from './ComparisonLevenshteinParams';
import {
    instanceOfComparisonLevenshteinParams,
    ComparisonLevenshteinParamsFromJSON,
    ComparisonLevenshteinParamsFromJSONTyped,
    ComparisonLevenshteinParamsToJSON,
} from './ComparisonLevenshteinParams';
import type { ComparisonStrictParams } from './ComparisonStrictParams';
import {
    instanceOfComparisonStrictParams,
    ComparisonStrictParamsFromJSON,
    ComparisonStrictParamsFromJSONTyped,
    ComparisonStrictParamsToJSON,
} from './ComparisonStrictParams';

/**
 * @type Params
 * 
 * @export
 */
export type Params = { type: 'LAZY' } & ComparisonLazyParams | { type: 'LEVENSHTEIN' } & ComparisonLevenshteinParams | { type: 'STRICT' } & ComparisonStrictParams;

export function ParamsFromJSON(json: any): Params {
    return ParamsFromJSONTyped(json, false);
}

export function ParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Params {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'LAZY':
            return Object.assign({}, ComparisonLazyParamsFromJSONTyped(json, true), { type: 'LAZY' } as const);
        case 'LEVENSHTEIN':
            return Object.assign({}, ComparisonLevenshteinParamsFromJSONTyped(json, true), { type: 'LEVENSHTEIN' } as const);
        case 'STRICT':
            return Object.assign({}, ComparisonStrictParamsFromJSONTyped(json, true), { type: 'STRICT' } as const);
        default:
            return json;
    }
}

export function ParamsToJSON(json: any): any {
    return ParamsToJSONTyped(json, false);
}

export function ParamsToJSONTyped(value?: Params | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'LAZY':
            return Object.assign({}, ComparisonLazyParamsToJSON(value), { type: 'LAZY' } as const);
        case 'LEVENSHTEIN':
            return Object.assign({}, ComparisonLevenshteinParamsToJSON(value), { type: 'LEVENSHTEIN' } as const);
        case 'STRICT':
            return Object.assign({}, ComparisonStrictParamsToJSON(value), { type: 'STRICT' } as const);
        default:
            return value;
    }
}

