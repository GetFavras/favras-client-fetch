/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComparisonValue } from './ComparisonValue';
import {
    ComparisonValueFromJSON,
    ComparisonValueFromJSONTyped,
    ComparisonValueToJSON,
    ComparisonValueToJSONTyped,
} from './ComparisonValue';
import type { Params } from './Params';
import {
    ParamsFromJSON,
    ParamsFromJSONTyped,
    ParamsToJSON,
    ParamsToJSONTyped,
} from './Params';

/**
 * 
 * @export
 * @interface Comparison
 */
export interface Comparison {
    /**
     * 
     * @type {string}
     * @memberof Comparison
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Comparison
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof Comparison
     */
    user?: string | null;
    /**
     * 
     * @type {Array<ComparisonValue>}
     * @memberof Comparison
     */
    literals?: Array<ComparisonValue>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof Comparison
     */
    attributes: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Params}
     * @memberof Comparison
     */
    params: Params;
}

/**
 * Check if a given object implements the Comparison interface.
 */
export function instanceOfComparison(value: object): value is Comparison {
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('params' in value) || value['params'] === undefined) return false;
    return true;
}

export function ComparisonFromJSON(json: any): Comparison {
    return ComparisonFromJSONTyped(json, false);
}

export function ComparisonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Comparison {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'] == null ? undefined : json['_id'],
        'key': json['key'],
        'user': json['user'] == null ? undefined : json['user'],
        'literals': json['literals'] == null ? undefined : ((json['literals'] as Array<any>).map(ComparisonValueFromJSON)),
        'attributes': json['attributes'],
        'params': ParamsFromJSON(json['params']),
    };
}

export function ComparisonToJSON(json: any): Comparison {
    return ComparisonToJSONTyped(json, false);
}

export function ComparisonToJSONTyped(value?: Comparison | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'key': value['key'],
        'user': value['user'],
        'literals': value['literals'] == null ? undefined : ((value['literals'] as Array<any>).map(ComparisonValueToJSON)),
        'attributes': value['attributes'],
        'params': ParamsToJSON(value['params']),
    };
}

