/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComparisonLevenshteinParams
 */
export interface ComparisonLevenshteinParams {
    /**
     * 
     * @type {string}
     * @memberof ComparisonLevenshteinParams
     */
    type: ComparisonLevenshteinParamsTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ComparisonLevenshteinParams
     */
    maxDistance: number;
}


/**
 * @export
 */
export const ComparisonLevenshteinParamsTypeEnum = {
    Levenshtein: 'LEVENSHTEIN'
} as const;
export type ComparisonLevenshteinParamsTypeEnum = typeof ComparisonLevenshteinParamsTypeEnum[keyof typeof ComparisonLevenshteinParamsTypeEnum];


/**
 * Check if a given object implements the ComparisonLevenshteinParams interface.
 */
export function instanceOfComparisonLevenshteinParams(value: object): value is ComparisonLevenshteinParams {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('maxDistance' in value) || value['maxDistance'] === undefined) return false;
    return true;
}

export function ComparisonLevenshteinParamsFromJSON(json: any): ComparisonLevenshteinParams {
    return ComparisonLevenshteinParamsFromJSONTyped(json, false);
}

export function ComparisonLevenshteinParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComparisonLevenshteinParams {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'maxDistance': json['max_distance'],
    };
}

export function ComparisonLevenshteinParamsToJSON(json: any): ComparisonLevenshteinParams {
    return ComparisonLevenshteinParamsToJSONTyped(json, false);
}

export function ComparisonLevenshteinParamsToJSONTyped(value?: ComparisonLevenshteinParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'max_distance': value['maxDistance'],
    };
}

