/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PaginatedListRequisite,
  RequisiteInput,
  RequisiteOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PaginatedListRequisiteFromJSON,
    PaginatedListRequisiteToJSON,
    RequisiteInputFromJSON,
    RequisiteInputToJSON,
    RequisiteOutputFromJSON,
    RequisiteOutputToJSON,
} from '../models/index';

export interface CreateRequisiteRequest {
    requisiteInput: RequisiteInput;
}

export interface DeleteRequisiteRequest {
    requisiteId: string;
}

export interface GetRequisiteRequest {
    requisiteId: string;
}

export interface ListRequisitesRequest {
    page?: number;
    size?: number;
}

export interface UpdateRequisiteRequest {
    requisiteId: string;
    requisiteInput: RequisiteInput;
}

/**
 * 
 */
export class RequisiteApi extends runtime.BaseAPI {

    /**
     * Create requisite.
     * Create Requisite
     */
    async createRequisiteRaw(requestParameters: CreateRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['requisiteInput'] == null) {
            throw new runtime.RequiredError(
                'requisiteInput',
                'Required parameter "requisiteInput" was null or undefined when calling createRequisite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/requisite`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequisiteInputToJSON(requestParameters['requisiteInput']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create requisite.
     * Create Requisite
     */
    async createRequisite(requestParameters: CreateRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createRequisiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Requisite
     */
    async deleteRequisiteRaw(requestParameters: DeleteRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requisiteId'] == null) {
            throw new runtime.RequiredError(
                'requisiteId',
                'Required parameter "requisiteId" was null or undefined when calling deleteRequisite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/requisite/{requisite_id}`;
        urlPath = urlPath.replace(`{${"requisite_id"}}`, encodeURIComponent(String(requestParameters['requisiteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Requisite
     */
    async deleteRequisite(requestParameters: DeleteRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteRequisiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a requisite by id.
     * Get Requisite
     */
    async getRequisiteRaw(requestParameters: GetRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequisiteOutput>> {
        if (requestParameters['requisiteId'] == null) {
            throw new runtime.RequiredError(
                'requisiteId',
                'Required parameter "requisiteId" was null or undefined when calling getRequisite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/requisite/{requisite_id}`;
        urlPath = urlPath.replace(`{${"requisite_id"}}`, encodeURIComponent(String(requestParameters['requisiteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequisiteOutputFromJSON(jsonValue));
    }

    /**
     * Get a requisite by id.
     * Get Requisite
     */
    async getRequisite(requestParameters: GetRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequisiteOutput> {
        const response = await this.getRequisiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get paginated requisites.
     * List Requisites
     */
    async listRequisitesRaw(requestParameters: ListRequisitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListRequisite>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/requisite`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListRequisiteFromJSON(jsonValue));
    }

    /**
     * Get paginated requisites.
     * List Requisites
     */
    async listRequisites(requestParameters: ListRequisitesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListRequisite> {
        const response = await this.listRequisitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a requisite given by its id.
     * Update Requisite
     */
    async updateRequisiteRaw(requestParameters: UpdateRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requisiteId'] == null) {
            throw new runtime.RequiredError(
                'requisiteId',
                'Required parameter "requisiteId" was null or undefined when calling updateRequisite().'
            );
        }

        if (requestParameters['requisiteInput'] == null) {
            throw new runtime.RequiredError(
                'requisiteInput',
                'Required parameter "requisiteInput" was null or undefined when calling updateRequisite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/requisite/{requisite_id}`;
        urlPath = urlPath.replace(`{${"requisite_id"}}`, encodeURIComponent(String(requestParameters['requisiteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequisiteInputToJSON(requestParameters['requisiteInput']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update a requisite given by its id.
     * Update Requisite
     */
    async updateRequisite(requestParameters: UpdateRequisiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateRequisiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
