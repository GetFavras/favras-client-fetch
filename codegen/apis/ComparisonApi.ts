/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Comparison,
  HTTPValidationError,
} from '../models/index';
import {
    ComparisonFromJSON,
    ComparisonToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateComparisonRequest {
    comparison: Comparison;
}

export interface GetComparisonRequest {
    comparisonId: string;
}

/**
 * 
 */
export class ComparisonApi extends runtime.BaseAPI {

    /**
     * Create Comparison
     */
    async createComparisonRaw(requestParameters: CreateComparisonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['comparison'] == null) {
            throw new runtime.RequiredError(
                'comparison',
                'Required parameter "comparison" was null or undefined when calling createComparison().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/comparison`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComparisonToJSON(requestParameters['comparison']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Comparison
     */
    async createComparison(requestParameters: CreateComparisonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createComparisonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a comparison by id.
     * Get Comparison
     */
    async getComparisonRaw(requestParameters: GetComparisonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comparison>> {
        if (requestParameters['comparisonId'] == null) {
            throw new runtime.RequiredError(
                'comparisonId',
                'Required parameter "comparisonId" was null or undefined when calling getComparison().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/comparison/{comparison_id}`;
        urlPath = urlPath.replace(`{${"comparison_id"}}`, encodeURIComponent(String(requestParameters['comparisonId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComparisonFromJSON(jsonValue));
    }

    /**
     * Get a comparison by id.
     * Get Comparison
     */
    async getComparison(requestParameters: GetComparisonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comparison> {
        const response = await this.getComparisonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
