/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  RequestUserPartial,
  ResponseUser,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RequestUserPartialFromJSON,
    RequestUserPartialToJSON,
    ResponseUserFromJSON,
    ResponseUserToJSON,
} from '../models/index';

export interface UpdateUserRequest {
    userId: string;
    requestUserPartial: RequestUserPartial;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get user given by auth header.
     * Get User From Auth
     */
    async getUserFromAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/user/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserFromJSON(jsonValue));
    }

    /**
     * Get user given by auth header.
     * Get User From Auth
     */
    async getUserFromAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUser> {
        const response = await this.getUserFromAuthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all users that can be impersonated by the current user.
     * List Users
     */
    async listUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResponseUser | null>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseUserFromJSON));
    }

    /**
     * Get all users that can be impersonated by the current user.
     * List Users
     */
    async listUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResponseUser | null>> {
        const response = await this.listUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update User
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['requestUserPartial'] == null) {
            throw new runtime.RequiredError(
                'requestUserPartial',
                'Required parameter "requestUserPartial" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/user/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUserPartialToJSON(requestParameters['requestUserPartial']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update User
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
