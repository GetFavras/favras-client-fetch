/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Compression,
  HTTPValidationError,
  Multimodal,
  PaginatedListRevision,
  Promptroles,
  Requisites,
  Revision,
  RevisionTagSpecifier,
} from '../models/index';
import {
    CompressionFromJSON,
    CompressionToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MultimodalFromJSON,
    MultimodalToJSON,
    PaginatedListRevisionFromJSON,
    PaginatedListRevisionToJSON,
    PromptrolesFromJSON,
    PromptrolesToJSON,
    RequisitesFromJSON,
    RequisitesToJSON,
    RevisionFromJSON,
    RevisionToJSON,
    RevisionTagSpecifierFromJSON,
    RevisionTagSpecifierToJSON,
} from '../models/index';

export interface GetRevisionRequest {
    revisionId: string;
}

export interface ListRevisionsRequest {
    page?: number;
    size?: number;
}

export interface ReviseDocumentsRequest {
    files: Array<Blob>;
    requisites: Requisites;
    comparisons?: string | null;
    projections?: string | null;
    promptroles?: Promptroles | null;
    tags?: RevisionTagSpecifier | null;
    multimodal?: Multimodal | null;
    compression?: Compression | null;
}

/**
 * 
 */
export class RevisionApi extends runtime.BaseAPI {

    /**
     * Returns a revision by id.
     * Get Revision
     */
    async getRevisionRaw(requestParameters: GetRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Revision>> {
        if (requestParameters['revisionId'] == null) {
            throw new runtime.RequiredError(
                'revisionId',
                'Required parameter "revisionId" was null or undefined when calling getRevision().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/revision/{revision_id}`;
        urlPath = urlPath.replace(`{${"revision_id"}}`, encodeURIComponent(String(requestParameters['revisionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevisionFromJSON(jsonValue));
    }

    /**
     * Returns a revision by id.
     * Get Revision
     */
    async getRevision(requestParameters: GetRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Revision> {
        const response = await this.getRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Revisions
     */
    async listRevisionsRaw(requestParameters: ListRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListRevision>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }


        let urlPath = `/revision`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListRevisionFromJSON(jsonValue));
    }

    /**
     * List Revisions
     */
    async listRevisions(requestParameters: ListRevisionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListRevision> {
        const response = await this.listRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates document revision tasks and returns the resulting resource\'s location.
     * Revise Documents
     */
    async reviseDocumentsRaw(requestParameters: ReviseDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling reviseDocuments().'
            );
        }

        if (requestParameters['requisites'] == null) {
            throw new runtime.RequiredError(
                'requisites',
                'Required parameter "requisites" was null or undefined when calling reviseDocuments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("CookieOAuth2PasswordBearer", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        if (requestParameters['requisites'] != null) {
            formParams.append('requisites', new Blob([JSON.stringify(RequisitesToJSON(requestParameters['requisites']))], { type: "application/json", }));
                    }

        if (requestParameters['comparisons'] != null) {
            formParams.append('comparisons', requestParameters['comparisons'] as any);
        }

        if (requestParameters['projections'] != null) {
            formParams.append('projections', requestParameters['projections'] as any);
        }

        if (requestParameters['promptroles'] != null) {
            formParams.append('promptroles', new Blob([JSON.stringify(PromptrolesToJSON(requestParameters['promptroles']))], { type: "application/json", }));
                    }

        if (requestParameters['tags'] != null) {
            formParams.append('tags', new Blob([JSON.stringify(RevisionTagSpecifierToJSON(requestParameters['tags']))], { type: "application/json", }));
                    }

        if (requestParameters['multimodal'] != null) {
            formParams.append('multimodal', new Blob([JSON.stringify(MultimodalToJSON(requestParameters['multimodal']))], { type: "application/json", }));
                    }

        if (requestParameters['compression'] != null) {
            formParams.append('compression', new Blob([JSON.stringify(CompressionToJSON(requestParameters['compression']))], { type: "application/json", }));
                    }


        let urlPath = `/revision`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Creates document revision tasks and returns the resulting resource\'s location.
     * Revise Documents
     */
    async reviseDocuments(requestParameters: ReviseDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.reviseDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
